{
  "name": "quagga",
  "version": "0.6.0",
  "description": "An advanced barcode-scanner written in JavaScript",
  "main": "dist/quagga.js",
  "devDependencies": {
    "grunt": "~0.4.6",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-uglify": "~0.5.0",
    "grunt-karma": "^0.9.0",
    "grunt-requirejs": "^0.4.2",
    "karma": "latest",
    "karma-chai": "latest",
    "karma-coverage": "^0.2.7",
    "karma-mocha": "latest",
    "karma-phantomjs-launcher": "^0.1.4",
    "karma-requirejs": "^0.2.2",
    "karma-sinon": "^1.0.4",
    "karma-sinon-chai": "^0.2.0",
    "sinon": "^1.12.1"
  },
  "directories": {
    "doc": "doc"
  },
  "scripts": {
    "test": "karma start"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/serratus/quaggaJS.git"
  },
  "bugs": {
    "url": "https://github.com/serratus/quaggaJS/issues"
  },
  "keywords": [
    "quagga",
    "quaggajs",
    "barcode",
    "ean",
    "code128",
    "code39",
    "getusermedia",
    "imageprocessing"
  ],
  "author": {
    "name": "Christoph Oberhofer",
    "email": "ch.oberhofer@gmail.com"
  },
  "license": "MIT",
  "readme": "quaggaJS\r\n========\r\n\r\n- [Changelog](#changelog) (2015-04-30)\r\n\r\n## What is QuaggaJS?\r\n\r\nQuaggaJS is a barcode-scanner entirely written in JavaScript supporting real-\r\ntime localization and decoding of various types of barcodes such as __EAN__,\r\n__CODE 128__, __CODE 39__, __EAN 8__, __UPC-A__, __UPC-C__ and  __CODABAR__.\r\nThe library is also capable of using `getUserMedia` to get direct access to\r\nthe user's camera stream. Although the code relies on heavy image-processing\r\neven recent smartphones are capable of locating and decoding barcodes in\r\nreal-time.\r\n\r\nTry some [examples](http://serratus.github.io/quaggaJS/examples) and check out\r\nthe blog post ([How barcode-localization works in QuaggaJS][oberhofer_co_how])\r\nif you want to dive deeper into this topic.\r\n\r\n![teaser][teaser_left]![teaser][teaser_right]\r\n\r\n\r\n## Yet another barcode library?\r\n\r\nThis is not yet another port of the great [zxing][zxing_github] library, but\r\nmore of an extension to it. This implementation features a barcode locator which\r\nis capable of finding a barcode-like pattern in an image resulting in an\r\nestimated bounding box including the rotation. Simply speaking, this reader is\r\ninvariant to scale and rotation, whereas other libraries require the barcode to\r\nbe aligned with the viewport.\r\n\r\n\r\n## Requirements\r\n\r\nIn order to take full advantage of quaggaJS, the browser needs to support the\r\n`getUserMedia` API which is already implemented in recent versions of Firefox,\r\nChrome and Opera. The API is also available on their mobile counterparts\r\ninstalled on Android. Safari and IE do not allow the access to the camera yet,\r\nneither on desktop, nor on mobile. You can check [caniuse][caniuse_getusermedia]\r\nfor updates.\r\n\r\nIn cases where real-time decoding is not needed, or the platform does not\r\nsupport `getUserMedia` QuaggaJS is also capable of decoding image-files using\r\nthe File API or other URL sources.\r\n\r\n## Getting Started\r\n\r\nYou can simply include `dist/quagga.min.js` in your project and you are ready\r\nto go.\r\n\r\nIf you want to keep your project modular, you can also install QuaggaJS via npm:\r\n\r\n```console\r\n> npm install quagga\r\n```\r\n\r\nAnd then import it as dependency in your project:\r\n\r\n```javascript\r\nvar quagga = require('quagga');\r\n```\r\n\r\nFor starters, have a look at the [examples][github_examples] to get an idea\r\nwhere to go from here.\r\n\r\n## <a name=\"Building\">Building</a>\r\n\r\nYou can build the library yourself by simply cloning the repo and typing:\r\n\r\n```console\r\n> npm install\r\n> grunt dist\r\n```\r\n\r\nThis grunt task builds a non optimized version `quagga.js` and a minified\r\nversion `quagga.min.js` and places both files in the `dist` folder.\r\n\r\n## API\r\n\r\nYou can check out the [examples][github_examples] to get an idea of how to\r\nuse QuaggaJS. Basically the library exposes the following API:\r\n\r\n### Quagga.init(config, callback)\r\n\r\nThis method initializes the library for a given configuration `config` (see\r\nbelow) and invokes the `callback` when Quagga is ready to start. The\r\ninitialization process also requests for camera access if real-time detection is\r\nconfigured.\r\n\r\n```javascript\r\nQuagga.init({\r\n    inputStream : {\r\n      name : \"Live\",\r\n      type : \"LiveStream\"\r\n    },\r\n    decoder : {\r\n      readers : [\"code_128_reader\"]\r\n    }\r\n  }, function() {\r\n      console.log(\"Initialization finished. Ready to start\");\r\n      Quagga.start();\r\n  });\r\n```\r\n\r\n### Quagga.start()\r\n\r\nWhen the library is initialized, the `start()` method starts the video-stream\r\nand begins locating and decoding the images.\r\n\r\n### Quagga.stop()\r\n\r\nIf the decoder is currently running, after calling `stop()` the decoder does not\r\nprocess any more images. Additionally, if a camera-stream was requested upon\r\ninitialization, this operation also disconnects the camera.\r\n\r\n### Quagga.onProcessed(callback)\r\n\r\nThis method registers a `callback(data)` function that is called for each frame\r\nafter the processing is done. The `data` object contains detailed information\r\nabout the success/failure of the operation. The output varies, depending whether\r\nthe detection and/or decoding were successful or not.\r\n\r\n### Quagga.onDetected(callback)\r\n\r\nRegisters a `callback(data)` function which is triggered whenever a barcode-\r\npattern has been located and decoded successfully. The passed `data` object\r\ncontains information about the decoding process including the detected code\r\nwhich can be obtained by calling `data.codeResult.code`.\r\n\r\n### Quagga.decodeSingle(config, callback)\r\n\r\nIn contrast to the calls described above, this method does not rely on\r\n`getUserMedia` and operates on a single image instead. The provided callback\r\nis the same as in `onDetected` and contains the result `data` object.\r\n\r\n## <a name=\"resultobject\">The result object</a>\r\n\r\nThe callbacks passed into `onProcessed`, `onDetected` and `decodeSingle`\r\nreceive a `data` object upon execution. The `data` object contains the following\r\ninformation. Depending on the success, some fields may be `undefined` or just\r\nempty.\r\n\r\n```javascript\r\n{\r\n  \"codeResult\": {\r\n    \"code\": \"FANAVF1461710\",\r\n    \"start\": 355,\r\n    \"end\": 26,\r\n    \"codeset\": 100,\r\n    \"startInfo\": {\r\n      \"error\": 1.0000000000000002,\r\n      \"code\": 104,\r\n      \"start\": 21,\r\n      \"end\": 41\r\n    },\r\n    \"decodedCodes\": [{\r\n      \"code\": 104,\r\n      \"start\": 21,\r\n      \"end\": 41\r\n    },\r\n    // stripped for brevity\r\n    {\r\n      \"error\": 0.8888888888888893,\r\n      \"code\": 106,\r\n      \"start\": 328,\r\n      \"end\": 350\r\n    }],\r\n    \"endInfo\": {\r\n      \"error\": 0.8888888888888893,\r\n      \"code\": 106,\r\n      \"start\": 328,\r\n      \"end\": 350\r\n    },\r\n    \"direction\": -1\r\n  },\r\n  \"line\": [{\r\n    \"x\": 25.97278706156836,\r\n    \"y\": 360.5616435369468\r\n  }, {\r\n    \"x\": 401.9220519377024,\r\n    \"y\": 70.87524989906444\r\n  }],\r\n  \"angle\": -0.6565217179979483,\r\n  \"pattern\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, /* ... */ 1],\r\n  \"box\": [\r\n    [77.4074243622672, 410.9288668804402],\r\n    [0.050203235235130705, 310.53619724086366],\r\n    [360.15706727788256, 33.05711026051813],\r\n    [437.5142884049146, 133.44977990009465]\r\n  ],\r\n  \"boxes\": [\r\n    [\r\n      [77.4074243622672, 410.9288668804402],\r\n      [0.050203235235130705, 310.53619724086366],\r\n      [360.15706727788256, 33.05711026051813],\r\n      [437.5142884049146, 133.44977990009465]\r\n    ],\r\n    [\r\n      [248.90769330706507, 415.2041489551161],\r\n      [198.9532321622869, 352.62160512937635],\r\n      [339.546160777576, 240.3979259789976],\r\n      [389.5006219223542, 302.98046980473737]\r\n    ]\r\n  ]\r\n}\r\n```\r\n\r\n## <a name=\"configobject\">Config</a>\r\n\r\nThe default `config` object is set as followed:\r\n\r\n```javascript\r\n{\r\n  inputStream: { name: \"Live\",\r\n       type: \"LiveStream\",\r\n       constraints: {\r\n         width: 640,\r\n         height: 480,\r\n         facing: \"environment\"\r\n       }\r\n  },\r\n  tracking: false,\r\n  debug: false,\r\n  controls: false,\r\n  locate: true,\r\n  numOfWorkers: 4,\r\n  visual: {\r\n    show: true\r\n  },\r\n  decoder:{\r\n    drawBoundingBox: false,\r\n    showFrequency: false,\r\n    drawScanline: true,\r\n    showPattern: false,\r\n    readers: [\r\n      'code_128_reader'\r\n    ]\r\n  },\r\n  locator: {\r\n    halfSample: true,\r\n    patchSize: \"medium\", // x-small, small, medium, large, x-large\r\n    showCanvas: false,\r\n    showPatches: false,\r\n    showFoundPatches: false,\r\n    showSkeleton: false,\r\n    showLabels: false,\r\n    showPatchLabels: false,\r\n    showRemainingPatchLabels: false,\r\n    boxFromPatches: {\r\n      showTransformed: false,\r\n      showTransformedBox: false,\r\n      showBB: false\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nThe following example takes an image `src` as input and prints the result on the\r\nconsole. The decoder is configured to detect _Code128_ barcodes and enables the\r\nlocating-mechanism for more robust results.\r\n\r\n```javascript\r\nQuagga.decodeSingle({\r\n  readers: ['code_128_reader'],\r\n  locate: true, // try to locate the barcode in the image\r\n  src: '/test/fixtures/code_128/image-001.jpg' // or 'data:image/jpg;base64,' + data\r\n}, function(result){\r\n  console.log(result);\r\n});\r\n```\r\n\r\n## Tests\r\n\r\nUnit Tests can be run with [Karma][karmaUrl] and written using\r\n[Mocha][mochaUrl], [Chai][chaiUrl] and [SinonJS][sinonUrl]. Coverage reports are\r\nautomatically generated in the coverage/ folder.\r\n\r\n```console\r\n> npm install\r\n> grunt test\r\n```\r\n## Image Debugging\r\n\r\nIn case you want to take a deeper dive into the inner workings of Quagga, get to\r\nknow the _debugging_ capabilities of the current implementation. The various\r\nflags exposed through the `config` object give you the abilily to visualize\r\nalmost every step in the processing. Because of the introduction of the\r\nweb-workers, and their restriction not to have access to the DOM, the\r\nconfiguration must be explicitly set to `config.numOfWorkers = 0` in order to\r\nwork.\r\n\r\n## <a name=\"changelog\">Changelog</a>\r\n\r\n### 2015-04-30\r\n- Features\r\n  - Added support for [UPC-A and UPC-E][upc_wiki] barcodes\r\n  - Added support for [EAN-8][ean_8_wiki] barcodes\r\n- Improvements\r\n  - Added extended configuration to the live-video example\r\n  - Releasing resources when calling ``Quagga.stop()``\r\n\r\n### 2015-04-25\r\n- Improvements\r\n  - Added extended configuration to the file-input example\r\n  - Configurable ``patchSize`` for better adjustment to small/medium/large\r\n      barcodes\r\n\r\n### 2015-04-16\r\n- Features\r\n  - Added support for [Codabar][codabar_wiki] barcodes\r\n\r\n### 2015-03-16\r\n- Improvements\r\n  - now includes minified version (23.3KB gzipped)\r\n  - No need for configuration of script-name any more\r\n\r\n### 2015-03-12\r\n- Improvements\r\n  - removed dependency on async.js\r\n\r\n### 2015-03-04\r\n- Features\r\n  - Added support for [Code 39][code39_wiki] barcodes\r\n\r\n### 2015-01-21\r\n- Features\r\n  - Added support for web-worker (using 4 workers as default, can be changed\r\n  through `config.numOfWorkers`)\r\n  - Due to the way how web-workers are created, the name of the script file\r\n  (`config.scriptName`) should be kept in sync with your actual filename\r\n  - Removed canvas-overlay for decoding (boxes & scanline) which can now be\r\n  easily implemented using the existing API (see example)\r\n- API Changes\r\nIn the course of implementing web-workers some breaking changes were\r\nintroduced to the API.\r\n  - The `Quagga.init` function no longer receives the callback as part of the\r\n   config but rather as a second argument: `Quagga.init(config, cb)`\r\n  - The callback to `Quagga.onDetected` now receives an object containing\r\n  much more information in addition to the decoded code.(see\r\n  [data](#resultobject))\r\n  - Added `Quagga.onProcessed(callback)` which provides a way to get information\r\n  for each image processed. The callback receives the same `data` object as\r\n  `Quagga.onDetected` does. Depending on the success of the process the `data`\r\n  object might not contain any `resultCode` and/or `box` properties.\r\n\r\n[zxing_github]: https://github.com/zxing/zxing\r\n[teaser_left]: https://raw.githubusercontent.com/serratus/quaggaJS/master/doc/img/mobile-located.png\r\n[teaser_right]: https://raw.githubusercontent.com/serratus/quaggaJS/master/doc/img/mobile-detected.png\r\n[caniuse_getusermedia]: http://caniuse.com/#feat=stream\r\n[sinonUrl]: http://sinonjs.org/\r\n[chaiUrl]: http://chaijs.com/\r\n[mochaUrl]: https://github.com/mochajs/mocha\r\n[karmaUrl]: http://karma-runner.github.io/\r\n[code39_wiki]: http://en.wikipedia.org/wiki/Code_39\r\n[codabar_wiki]: http://en.wikipedia.org/wiki/Codabar\r\n[upc_wiki]: http://en.wikipedia.org/wiki/Universal_Product_Code\r\n[ean_8_wiki]: http://en.wikipedia.org/wiki/EAN-8\r\n[oberhofer_co_how]: http://www.oberhofer.co/how-barcode-localization-works-in-quaggajs/\r\n[github_examples]: http://serratus.github.io/quaggaJS/examples\r\n",
  "readmeFilename": "README.md",
  "_id": "quagga@0.6.0",
  "_from": "quagga@"
}
